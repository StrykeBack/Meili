# source: http://localhost:4466
# timestamp: Fri Aug 17 2018 14:49:36 GMT-0400 (EDT)

type Activity implements Node {
  id: ID!
  name: String!
  description: String!
  cost: Float
  image: String!
  location: String
  source: String!
  website: String
  local_tourist: String!
  indoor_outdoor: String
  concepts: Json!
  categories: Json!
  child_friendly: Boolean
  ratings(where: RatingsWhereInput): Ratings
}

"""A connection to a list of items."""
type ActivityConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [ActivityEdge]!
  aggregate: AggregateActivity!
}

input ActivityCreateInput {
  name: String!
  description: String!
  cost: Float
  image: String!
  location: String
  source: String!
  website: String
  local_tourist: String!
  indoor_outdoor: String
  concepts: Json!
  categories: Json!
  child_friendly: Boolean
  ratings: RatingsCreateOneInput
}

"""An edge in a connection."""
type ActivityEdge {
  """The item at the end of the edge."""
  node: Activity!

  """A cursor for use in pagination."""
  cursor: String!
}

enum ActivityOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  description_ASC
  description_DESC
  cost_ASC
  cost_DESC
  image_ASC
  image_DESC
  location_ASC
  location_DESC
  source_ASC
  source_DESC
  website_ASC
  website_DESC
  local_tourist_ASC
  local_tourist_DESC
  indoor_outdoor_ASC
  indoor_outdoor_DESC
  concepts_ASC
  concepts_DESC
  categories_ASC
  categories_DESC
  child_friendly_ASC
  child_friendly_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type ActivityPreviousValues {
  id: ID!
  name: String!
  description: String!
  cost: Float
  image: String!
  location: String
  source: String!
  website: String
  local_tourist: String!
  indoor_outdoor: String
  concepts: Json!
  categories: Json!
  child_friendly: Boolean
}

type ActivitySubscriptionPayload {
  mutation: MutationType!
  node: Activity
  updatedFields: [String!]
  previousValues: ActivityPreviousValues
}

input ActivitySubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [ActivitySubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [ActivitySubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ActivitySubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: ActivityWhereInput
}

input ActivityUpdateInput {
  name: String
  description: String
  cost: Float
  image: String
  location: String
  source: String
  website: String
  local_tourist: String
  indoor_outdoor: String
  concepts: Json
  categories: Json
  child_friendly: Boolean
  ratings: RatingsUpdateOneInput
}

input ActivityWhereInput {
  """Logical AND on all given filters."""
  AND: [ActivityWhereInput!]

  """Logical OR on all given filters."""
  OR: [ActivityWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ActivityWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  description: String

  """All values that are not equal to given value."""
  description_not: String

  """All values that are contained in given list."""
  description_in: [String!]

  """All values that are not contained in given list."""
  description_not_in: [String!]

  """All values less than the given value."""
  description_lt: String

  """All values less than or equal the given value."""
  description_lte: String

  """All values greater than the given value."""
  description_gt: String

  """All values greater than or equal the given value."""
  description_gte: String

  """All values containing the given string."""
  description_contains: String

  """All values not containing the given string."""
  description_not_contains: String

  """All values starting with the given string."""
  description_starts_with: String

  """All values not starting with the given string."""
  description_not_starts_with: String

  """All values ending with the given string."""
  description_ends_with: String

  """All values not ending with the given string."""
  description_not_ends_with: String
  cost: Float

  """All values that are not equal to given value."""
  cost_not: Float

  """All values that are contained in given list."""
  cost_in: [Float!]

  """All values that are not contained in given list."""
  cost_not_in: [Float!]

  """All values less than the given value."""
  cost_lt: Float

  """All values less than or equal the given value."""
  cost_lte: Float

  """All values greater than the given value."""
  cost_gt: Float

  """All values greater than or equal the given value."""
  cost_gte: Float
  image: String

  """All values that are not equal to given value."""
  image_not: String

  """All values that are contained in given list."""
  image_in: [String!]

  """All values that are not contained in given list."""
  image_not_in: [String!]

  """All values less than the given value."""
  image_lt: String

  """All values less than or equal the given value."""
  image_lte: String

  """All values greater than the given value."""
  image_gt: String

  """All values greater than or equal the given value."""
  image_gte: String

  """All values containing the given string."""
  image_contains: String

  """All values not containing the given string."""
  image_not_contains: String

  """All values starting with the given string."""
  image_starts_with: String

  """All values not starting with the given string."""
  image_not_starts_with: String

  """All values ending with the given string."""
  image_ends_with: String

  """All values not ending with the given string."""
  image_not_ends_with: String
  location: String

  """All values that are not equal to given value."""
  location_not: String

  """All values that are contained in given list."""
  location_in: [String!]

  """All values that are not contained in given list."""
  location_not_in: [String!]

  """All values less than the given value."""
  location_lt: String

  """All values less than or equal the given value."""
  location_lte: String

  """All values greater than the given value."""
  location_gt: String

  """All values greater than or equal the given value."""
  location_gte: String

  """All values containing the given string."""
  location_contains: String

  """All values not containing the given string."""
  location_not_contains: String

  """All values starting with the given string."""
  location_starts_with: String

  """All values not starting with the given string."""
  location_not_starts_with: String

  """All values ending with the given string."""
  location_ends_with: String

  """All values not ending with the given string."""
  location_not_ends_with: String
  source: String

  """All values that are not equal to given value."""
  source_not: String

  """All values that are contained in given list."""
  source_in: [String!]

  """All values that are not contained in given list."""
  source_not_in: [String!]

  """All values less than the given value."""
  source_lt: String

  """All values less than or equal the given value."""
  source_lte: String

  """All values greater than the given value."""
  source_gt: String

  """All values greater than or equal the given value."""
  source_gte: String

  """All values containing the given string."""
  source_contains: String

  """All values not containing the given string."""
  source_not_contains: String

  """All values starting with the given string."""
  source_starts_with: String

  """All values not starting with the given string."""
  source_not_starts_with: String

  """All values ending with the given string."""
  source_ends_with: String

  """All values not ending with the given string."""
  source_not_ends_with: String
  website: String

  """All values that are not equal to given value."""
  website_not: String

  """All values that are contained in given list."""
  website_in: [String!]

  """All values that are not contained in given list."""
  website_not_in: [String!]

  """All values less than the given value."""
  website_lt: String

  """All values less than or equal the given value."""
  website_lte: String

  """All values greater than the given value."""
  website_gt: String

  """All values greater than or equal the given value."""
  website_gte: String

  """All values containing the given string."""
  website_contains: String

  """All values not containing the given string."""
  website_not_contains: String

  """All values starting with the given string."""
  website_starts_with: String

  """All values not starting with the given string."""
  website_not_starts_with: String

  """All values ending with the given string."""
  website_ends_with: String

  """All values not ending with the given string."""
  website_not_ends_with: String
  local_tourist: String

  """All values that are not equal to given value."""
  local_tourist_not: String

  """All values that are contained in given list."""
  local_tourist_in: [String!]

  """All values that are not contained in given list."""
  local_tourist_not_in: [String!]

  """All values less than the given value."""
  local_tourist_lt: String

  """All values less than or equal the given value."""
  local_tourist_lte: String

  """All values greater than the given value."""
  local_tourist_gt: String

  """All values greater than or equal the given value."""
  local_tourist_gte: String

  """All values containing the given string."""
  local_tourist_contains: String

  """All values not containing the given string."""
  local_tourist_not_contains: String

  """All values starting with the given string."""
  local_tourist_starts_with: String

  """All values not starting with the given string."""
  local_tourist_not_starts_with: String

  """All values ending with the given string."""
  local_tourist_ends_with: String

  """All values not ending with the given string."""
  local_tourist_not_ends_with: String
  indoor_outdoor: String

  """All values that are not equal to given value."""
  indoor_outdoor_not: String

  """All values that are contained in given list."""
  indoor_outdoor_in: [String!]

  """All values that are not contained in given list."""
  indoor_outdoor_not_in: [String!]

  """All values less than the given value."""
  indoor_outdoor_lt: String

  """All values less than or equal the given value."""
  indoor_outdoor_lte: String

  """All values greater than the given value."""
  indoor_outdoor_gt: String

  """All values greater than or equal the given value."""
  indoor_outdoor_gte: String

  """All values containing the given string."""
  indoor_outdoor_contains: String

  """All values not containing the given string."""
  indoor_outdoor_not_contains: String

  """All values starting with the given string."""
  indoor_outdoor_starts_with: String

  """All values not starting with the given string."""
  indoor_outdoor_not_starts_with: String

  """All values ending with the given string."""
  indoor_outdoor_ends_with: String

  """All values not ending with the given string."""
  indoor_outdoor_not_ends_with: String
  child_friendly: Boolean

  """All values that are not equal to given value."""
  child_friendly_not: Boolean
  ratings: RatingsWhereInput
}

input ActivityWhereUniqueInput {
  id: ID
}

type AggregateActivity {
  count: Int!
}

type AggregateRatings {
  count: Int!
}

type AggregateRestaurant {
  count: Int!
}

type AggregateUsers {
  count: Int!
}

type AggregateWeather {
  count: Int!
}

type BatchPayload {
  """The number of nodes that have been affected by the Batch operation."""
  count: Long!
}

"""Raw JSON value"""
scalar Json

"""
The `Long` scalar type represents non-fractional signed whole numeric values.
Long can represent values between -(2^63) and 2^63 - 1.
"""
scalar Long

type Mutation {
  createUsers(data: UsersCreateInput!): Users!
  createActivity(data: ActivityCreateInput!): Activity!
  createRestaurant(data: RestaurantCreateInput!): Restaurant!
  createWeather(data: WeatherCreateInput!): Weather!
  createRatings(data: RatingsCreateInput!): Ratings!
  updateUsers(data: UsersUpdateInput!, where: UsersWhereUniqueInput!): Users
  updateActivity(data: ActivityUpdateInput!, where: ActivityWhereUniqueInput!): Activity
  updateRestaurant(data: RestaurantUpdateInput!, where: RestaurantWhereUniqueInput!): Restaurant
  updateWeather(data: WeatherUpdateInput!, where: WeatherWhereUniqueInput!): Weather
  updateRatings(data: RatingsUpdateInput!, where: RatingsWhereUniqueInput!): Ratings
  deleteUsers(where: UsersWhereUniqueInput!): Users
  deleteActivity(where: ActivityWhereUniqueInput!): Activity
  deleteRestaurant(where: RestaurantWhereUniqueInput!): Restaurant
  deleteWeather(where: WeatherWhereUniqueInput!): Weather
  deleteRatings(where: RatingsWhereUniqueInput!): Ratings
  upsertUsers(where: UsersWhereUniqueInput!, create: UsersCreateInput!, update: UsersUpdateInput!): Users!
  upsertActivity(where: ActivityWhereUniqueInput!, create: ActivityCreateInput!, update: ActivityUpdateInput!): Activity!
  upsertRestaurant(where: RestaurantWhereUniqueInput!, create: RestaurantCreateInput!, update: RestaurantUpdateInput!): Restaurant!
  upsertWeather(where: WeatherWhereUniqueInput!, create: WeatherCreateInput!, update: WeatherUpdateInput!): Weather!
  upsertRatings(where: RatingsWhereUniqueInput!, create: RatingsCreateInput!, update: RatingsUpdateInput!): Ratings!
  updateManyUserses(data: UsersUpdateInput!, where: UsersWhereInput): BatchPayload!
  updateManyActivities(data: ActivityUpdateInput!, where: ActivityWhereInput): BatchPayload!
  updateManyRestaurants(data: RestaurantUpdateInput!, where: RestaurantWhereInput): BatchPayload!
  updateManyWeathers(data: WeatherUpdateInput!, where: WeatherWhereInput): BatchPayload!
  updateManyRatingses(data: RatingsUpdateInput!, where: RatingsWhereInput): BatchPayload!
  deleteManyUserses(where: UsersWhereInput): BatchPayload!
  deleteManyActivities(where: ActivityWhereInput): BatchPayload!
  deleteManyRestaurants(where: RestaurantWhereInput): BatchPayload!
  deleteManyWeathers(where: WeatherWhereInput): BatchPayload!
  deleteManyRatingses(where: RatingsWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

"""An object with an ID"""
interface Node {
  """The id of the object."""
  id: ID!
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String

  """When paginating forwards, the cursor to continue."""
  endCursor: String
}

type Query {
  userses(where: UsersWhereInput, orderBy: UsersOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Users]!
  activities(where: ActivityWhereInput, orderBy: ActivityOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Activity]!
  restaurants(where: RestaurantWhereInput, orderBy: RestaurantOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Restaurant]!
  weathers(where: WeatherWhereInput, orderBy: WeatherOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Weather]!
  ratingses(where: RatingsWhereInput, orderBy: RatingsOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Ratings]!
  users(where: UsersWhereUniqueInput!): Users
  activity(where: ActivityWhereUniqueInput!): Activity
  restaurant(where: RestaurantWhereUniqueInput!): Restaurant
  weather(where: WeatherWhereUniqueInput!): Weather
  ratings(where: RatingsWhereUniqueInput!): Ratings
  usersesConnection(where: UsersWhereInput, orderBy: UsersOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UsersConnection!
  activitiesConnection(where: ActivityWhereInput, orderBy: ActivityOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ActivityConnection!
  restaurantsConnection(where: RestaurantWhereInput, orderBy: RestaurantOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): RestaurantConnection!
  weathersConnection(where: WeatherWhereInput, orderBy: WeatherOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): WeatherConnection!
  ratingsesConnection(where: RatingsWhereInput, orderBy: RatingsOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): RatingsConnection!

  """Fetches an object given its ID"""
  node(
    """The ID of an object"""
    id: ID!
  ): Node
}

type Ratings implements Node {
  id: ID!
  indoor_outdoor: Float!
  tourist_local: Float!
  food_activity: Float!
}

"""A connection to a list of items."""
type RatingsConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [RatingsEdge]!
  aggregate: AggregateRatings!
}

input RatingsCreateInput {
  indoor_outdoor: Float!
  tourist_local: Float!
  food_activity: Float!
}

input RatingsCreateOneInput {
  create: RatingsCreateInput
  connect: RatingsWhereUniqueInput
}

"""An edge in a connection."""
type RatingsEdge {
  """The item at the end of the edge."""
  node: Ratings!

  """A cursor for use in pagination."""
  cursor: String!
}

enum RatingsOrderByInput {
  id_ASC
  id_DESC
  indoor_outdoor_ASC
  indoor_outdoor_DESC
  tourist_local_ASC
  tourist_local_DESC
  food_activity_ASC
  food_activity_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type RatingsPreviousValues {
  id: ID!
  indoor_outdoor: Float!
  tourist_local: Float!
  food_activity: Float!
}

type RatingsSubscriptionPayload {
  mutation: MutationType!
  node: Ratings
  updatedFields: [String!]
  previousValues: RatingsPreviousValues
}

input RatingsSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [RatingsSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [RatingsSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [RatingsSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: RatingsWhereInput
}

input RatingsUpdateDataInput {
  indoor_outdoor: Float
  tourist_local: Float
  food_activity: Float
}

input RatingsUpdateInput {
  indoor_outdoor: Float
  tourist_local: Float
  food_activity: Float
}

input RatingsUpdateOneInput {
  create: RatingsCreateInput
  connect: RatingsWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: RatingsUpdateDataInput
  upsert: RatingsUpsertNestedInput
}

input RatingsUpsertNestedInput {
  update: RatingsUpdateDataInput!
  create: RatingsCreateInput!
}

input RatingsWhereInput {
  """Logical AND on all given filters."""
  AND: [RatingsWhereInput!]

  """Logical OR on all given filters."""
  OR: [RatingsWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [RatingsWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  indoor_outdoor: Float

  """All values that are not equal to given value."""
  indoor_outdoor_not: Float

  """All values that are contained in given list."""
  indoor_outdoor_in: [Float!]

  """All values that are not contained in given list."""
  indoor_outdoor_not_in: [Float!]

  """All values less than the given value."""
  indoor_outdoor_lt: Float

  """All values less than or equal the given value."""
  indoor_outdoor_lte: Float

  """All values greater than the given value."""
  indoor_outdoor_gt: Float

  """All values greater than or equal the given value."""
  indoor_outdoor_gte: Float
  tourist_local: Float

  """All values that are not equal to given value."""
  tourist_local_not: Float

  """All values that are contained in given list."""
  tourist_local_in: [Float!]

  """All values that are not contained in given list."""
  tourist_local_not_in: [Float!]

  """All values less than the given value."""
  tourist_local_lt: Float

  """All values less than or equal the given value."""
  tourist_local_lte: Float

  """All values greater than the given value."""
  tourist_local_gt: Float

  """All values greater than or equal the given value."""
  tourist_local_gte: Float
  food_activity: Float

  """All values that are not equal to given value."""
  food_activity_not: Float

  """All values that are contained in given list."""
  food_activity_in: [Float!]

  """All values that are not contained in given list."""
  food_activity_not_in: [Float!]

  """All values less than the given value."""
  food_activity_lt: Float

  """All values less than or equal the given value."""
  food_activity_lte: Float

  """All values greater than the given value."""
  food_activity_gt: Float

  """All values greater than or equal the given value."""
  food_activity_gte: Float
}

input RatingsWhereUniqueInput {
  id: ID
}

type Restaurant implements Node {
  id: ID!
  name: String!
  image: String!
  cuisine: String!
  cost: Float!
  description: String!
  why_go: String!
  location: String
  source: String!
  website: String
}

"""A connection to a list of items."""
type RestaurantConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [RestaurantEdge]!
  aggregate: AggregateRestaurant!
}

input RestaurantCreateInput {
  name: String!
  image: String!
  cuisine: String!
  cost: Float!
  description: String!
  why_go: String!
  location: String
  source: String!
  website: String
}

"""An edge in a connection."""
type RestaurantEdge {
  """The item at the end of the edge."""
  node: Restaurant!

  """A cursor for use in pagination."""
  cursor: String!
}

enum RestaurantOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  image_ASC
  image_DESC
  cuisine_ASC
  cuisine_DESC
  cost_ASC
  cost_DESC
  description_ASC
  description_DESC
  why_go_ASC
  why_go_DESC
  location_ASC
  location_DESC
  source_ASC
  source_DESC
  website_ASC
  website_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type RestaurantPreviousValues {
  id: ID!
  name: String!
  image: String!
  cuisine: String!
  cost: Float!
  description: String!
  why_go: String!
  location: String
  source: String!
  website: String
}

type RestaurantSubscriptionPayload {
  mutation: MutationType!
  node: Restaurant
  updatedFields: [String!]
  previousValues: RestaurantPreviousValues
}

input RestaurantSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [RestaurantSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [RestaurantSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [RestaurantSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: RestaurantWhereInput
}

input RestaurantUpdateInput {
  name: String
  image: String
  cuisine: String
  cost: Float
  description: String
  why_go: String
  location: String
  source: String
  website: String
}

input RestaurantWhereInput {
  """Logical AND on all given filters."""
  AND: [RestaurantWhereInput!]

  """Logical OR on all given filters."""
  OR: [RestaurantWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [RestaurantWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  image: String

  """All values that are not equal to given value."""
  image_not: String

  """All values that are contained in given list."""
  image_in: [String!]

  """All values that are not contained in given list."""
  image_not_in: [String!]

  """All values less than the given value."""
  image_lt: String

  """All values less than or equal the given value."""
  image_lte: String

  """All values greater than the given value."""
  image_gt: String

  """All values greater than or equal the given value."""
  image_gte: String

  """All values containing the given string."""
  image_contains: String

  """All values not containing the given string."""
  image_not_contains: String

  """All values starting with the given string."""
  image_starts_with: String

  """All values not starting with the given string."""
  image_not_starts_with: String

  """All values ending with the given string."""
  image_ends_with: String

  """All values not ending with the given string."""
  image_not_ends_with: String
  cuisine: String

  """All values that are not equal to given value."""
  cuisine_not: String

  """All values that are contained in given list."""
  cuisine_in: [String!]

  """All values that are not contained in given list."""
  cuisine_not_in: [String!]

  """All values less than the given value."""
  cuisine_lt: String

  """All values less than or equal the given value."""
  cuisine_lte: String

  """All values greater than the given value."""
  cuisine_gt: String

  """All values greater than or equal the given value."""
  cuisine_gte: String

  """All values containing the given string."""
  cuisine_contains: String

  """All values not containing the given string."""
  cuisine_not_contains: String

  """All values starting with the given string."""
  cuisine_starts_with: String

  """All values not starting with the given string."""
  cuisine_not_starts_with: String

  """All values ending with the given string."""
  cuisine_ends_with: String

  """All values not ending with the given string."""
  cuisine_not_ends_with: String
  cost: Float

  """All values that are not equal to given value."""
  cost_not: Float

  """All values that are contained in given list."""
  cost_in: [Float!]

  """All values that are not contained in given list."""
  cost_not_in: [Float!]

  """All values less than the given value."""
  cost_lt: Float

  """All values less than or equal the given value."""
  cost_lte: Float

  """All values greater than the given value."""
  cost_gt: Float

  """All values greater than or equal the given value."""
  cost_gte: Float
  description: String

  """All values that are not equal to given value."""
  description_not: String

  """All values that are contained in given list."""
  description_in: [String!]

  """All values that are not contained in given list."""
  description_not_in: [String!]

  """All values less than the given value."""
  description_lt: String

  """All values less than or equal the given value."""
  description_lte: String

  """All values greater than the given value."""
  description_gt: String

  """All values greater than or equal the given value."""
  description_gte: String

  """All values containing the given string."""
  description_contains: String

  """All values not containing the given string."""
  description_not_contains: String

  """All values starting with the given string."""
  description_starts_with: String

  """All values not starting with the given string."""
  description_not_starts_with: String

  """All values ending with the given string."""
  description_ends_with: String

  """All values not ending with the given string."""
  description_not_ends_with: String
  why_go: String

  """All values that are not equal to given value."""
  why_go_not: String

  """All values that are contained in given list."""
  why_go_in: [String!]

  """All values that are not contained in given list."""
  why_go_not_in: [String!]

  """All values less than the given value."""
  why_go_lt: String

  """All values less than or equal the given value."""
  why_go_lte: String

  """All values greater than the given value."""
  why_go_gt: String

  """All values greater than or equal the given value."""
  why_go_gte: String

  """All values containing the given string."""
  why_go_contains: String

  """All values not containing the given string."""
  why_go_not_contains: String

  """All values starting with the given string."""
  why_go_starts_with: String

  """All values not starting with the given string."""
  why_go_not_starts_with: String

  """All values ending with the given string."""
  why_go_ends_with: String

  """All values not ending with the given string."""
  why_go_not_ends_with: String
  location: String

  """All values that are not equal to given value."""
  location_not: String

  """All values that are contained in given list."""
  location_in: [String!]

  """All values that are not contained in given list."""
  location_not_in: [String!]

  """All values less than the given value."""
  location_lt: String

  """All values less than or equal the given value."""
  location_lte: String

  """All values greater than the given value."""
  location_gt: String

  """All values greater than or equal the given value."""
  location_gte: String

  """All values containing the given string."""
  location_contains: String

  """All values not containing the given string."""
  location_not_contains: String

  """All values starting with the given string."""
  location_starts_with: String

  """All values not starting with the given string."""
  location_not_starts_with: String

  """All values ending with the given string."""
  location_ends_with: String

  """All values not ending with the given string."""
  location_not_ends_with: String
  source: String

  """All values that are not equal to given value."""
  source_not: String

  """All values that are contained in given list."""
  source_in: [String!]

  """All values that are not contained in given list."""
  source_not_in: [String!]

  """All values less than the given value."""
  source_lt: String

  """All values less than or equal the given value."""
  source_lte: String

  """All values greater than the given value."""
  source_gt: String

  """All values greater than or equal the given value."""
  source_gte: String

  """All values containing the given string."""
  source_contains: String

  """All values not containing the given string."""
  source_not_contains: String

  """All values starting with the given string."""
  source_starts_with: String

  """All values not starting with the given string."""
  source_not_starts_with: String

  """All values ending with the given string."""
  source_ends_with: String

  """All values not ending with the given string."""
  source_not_ends_with: String
  website: String

  """All values that are not equal to given value."""
  website_not: String

  """All values that are contained in given list."""
  website_in: [String!]

  """All values that are not contained in given list."""
  website_not_in: [String!]

  """All values less than the given value."""
  website_lt: String

  """All values less than or equal the given value."""
  website_lte: String

  """All values greater than the given value."""
  website_gt: String

  """All values greater than or equal the given value."""
  website_gte: String

  """All values containing the given string."""
  website_contains: String

  """All values not containing the given string."""
  website_not_contains: String

  """All values starting with the given string."""
  website_starts_with: String

  """All values not starting with the given string."""
  website_not_starts_with: String

  """All values ending with the given string."""
  website_ends_with: String

  """All values not ending with the given string."""
  website_not_ends_with: String
}

input RestaurantWhereUniqueInput {
  id: ID
  name: String
}

type Subscription {
  users(where: UsersSubscriptionWhereInput): UsersSubscriptionPayload
  activity(where: ActivitySubscriptionWhereInput): ActivitySubscriptionPayload
  restaurant(where: RestaurantSubscriptionWhereInput): RestaurantSubscriptionPayload
  weather(where: WeatherSubscriptionWhereInput): WeatherSubscriptionPayload
  ratings(where: RatingsSubscriptionWhereInput): RatingsSubscriptionPayload
}

type Users implements Node {
  id: ID!
  username: String!
  password: String!
  age: Int!
  gender: Int!
}

"""A connection to a list of items."""
type UsersConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [UsersEdge]!
  aggregate: AggregateUsers!
}

input UsersCreateInput {
  username: String!
  password: String!
  age: Int!
  gender: Int!
}

"""An edge in a connection."""
type UsersEdge {
  """The item at the end of the edge."""
  node: Users!

  """A cursor for use in pagination."""
  cursor: String!
}

enum UsersOrderByInput {
  id_ASC
  id_DESC
  username_ASC
  username_DESC
  password_ASC
  password_DESC
  age_ASC
  age_DESC
  gender_ASC
  gender_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type UsersPreviousValues {
  id: ID!
  username: String!
  password: String!
  age: Int!
  gender: Int!
}

type UsersSubscriptionPayload {
  mutation: MutationType!
  node: Users
  updatedFields: [String!]
  previousValues: UsersPreviousValues
}

input UsersSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [UsersSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [UsersSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [UsersSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: UsersWhereInput
}

input UsersUpdateInput {
  username: String
  password: String
  age: Int
  gender: Int
}

input UsersWhereInput {
  """Logical AND on all given filters."""
  AND: [UsersWhereInput!]

  """Logical OR on all given filters."""
  OR: [UsersWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [UsersWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  username: String

  """All values that are not equal to given value."""
  username_not: String

  """All values that are contained in given list."""
  username_in: [String!]

  """All values that are not contained in given list."""
  username_not_in: [String!]

  """All values less than the given value."""
  username_lt: String

  """All values less than or equal the given value."""
  username_lte: String

  """All values greater than the given value."""
  username_gt: String

  """All values greater than or equal the given value."""
  username_gte: String

  """All values containing the given string."""
  username_contains: String

  """All values not containing the given string."""
  username_not_contains: String

  """All values starting with the given string."""
  username_starts_with: String

  """All values not starting with the given string."""
  username_not_starts_with: String

  """All values ending with the given string."""
  username_ends_with: String

  """All values not ending with the given string."""
  username_not_ends_with: String
  password: String

  """All values that are not equal to given value."""
  password_not: String

  """All values that are contained in given list."""
  password_in: [String!]

  """All values that are not contained in given list."""
  password_not_in: [String!]

  """All values less than the given value."""
  password_lt: String

  """All values less than or equal the given value."""
  password_lte: String

  """All values greater than the given value."""
  password_gt: String

  """All values greater than or equal the given value."""
  password_gte: String

  """All values containing the given string."""
  password_contains: String

  """All values not containing the given string."""
  password_not_contains: String

  """All values starting with the given string."""
  password_starts_with: String

  """All values not starting with the given string."""
  password_not_starts_with: String

  """All values ending with the given string."""
  password_ends_with: String

  """All values not ending with the given string."""
  password_not_ends_with: String
  age: Int

  """All values that are not equal to given value."""
  age_not: Int

  """All values that are contained in given list."""
  age_in: [Int!]

  """All values that are not contained in given list."""
  age_not_in: [Int!]

  """All values less than the given value."""
  age_lt: Int

  """All values less than or equal the given value."""
  age_lte: Int

  """All values greater than the given value."""
  age_gt: Int

  """All values greater than or equal the given value."""
  age_gte: Int
  gender: Int

  """All values that are not equal to given value."""
  gender_not: Int

  """All values that are contained in given list."""
  gender_in: [Int!]

  """All values that are not contained in given list."""
  gender_not_in: [Int!]

  """All values less than the given value."""
  gender_lt: Int

  """All values less than or equal the given value."""
  gender_lte: Int

  """All values greater than the given value."""
  gender_gt: Int

  """All values greater than or equal the given value."""
  gender_gte: Int
}

input UsersWhereUniqueInput {
  id: ID
}

type Weather implements Node {
  id: ID!
  day: String!
  avg_temp: Float!
  min_temp: Float!
  max_temp: Float!
  snow: Float!
  rain: Float!
}

"""A connection to a list of items."""
type WeatherConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [WeatherEdge]!
  aggregate: AggregateWeather!
}

input WeatherCreateInput {
  day: String!
  avg_temp: Float!
  min_temp: Float!
  max_temp: Float!
  snow: Float!
  rain: Float!
}

"""An edge in a connection."""
type WeatherEdge {
  """The item at the end of the edge."""
  node: Weather!

  """A cursor for use in pagination."""
  cursor: String!
}

enum WeatherOrderByInput {
  id_ASC
  id_DESC
  day_ASC
  day_DESC
  avg_temp_ASC
  avg_temp_DESC
  min_temp_ASC
  min_temp_DESC
  max_temp_ASC
  max_temp_DESC
  snow_ASC
  snow_DESC
  rain_ASC
  rain_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type WeatherPreviousValues {
  id: ID!
  day: String!
  avg_temp: Float!
  min_temp: Float!
  max_temp: Float!
  snow: Float!
  rain: Float!
}

type WeatherSubscriptionPayload {
  mutation: MutationType!
  node: Weather
  updatedFields: [String!]
  previousValues: WeatherPreviousValues
}

input WeatherSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [WeatherSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [WeatherSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [WeatherSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: WeatherWhereInput
}

input WeatherUpdateInput {
  day: String
  avg_temp: Float
  min_temp: Float
  max_temp: Float
  snow: Float
  rain: Float
}

input WeatherWhereInput {
  """Logical AND on all given filters."""
  AND: [WeatherWhereInput!]

  """Logical OR on all given filters."""
  OR: [WeatherWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [WeatherWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  day: String

  """All values that are not equal to given value."""
  day_not: String

  """All values that are contained in given list."""
  day_in: [String!]

  """All values that are not contained in given list."""
  day_not_in: [String!]

  """All values less than the given value."""
  day_lt: String

  """All values less than or equal the given value."""
  day_lte: String

  """All values greater than the given value."""
  day_gt: String

  """All values greater than or equal the given value."""
  day_gte: String

  """All values containing the given string."""
  day_contains: String

  """All values not containing the given string."""
  day_not_contains: String

  """All values starting with the given string."""
  day_starts_with: String

  """All values not starting with the given string."""
  day_not_starts_with: String

  """All values ending with the given string."""
  day_ends_with: String

  """All values not ending with the given string."""
  day_not_ends_with: String
  avg_temp: Float

  """All values that are not equal to given value."""
  avg_temp_not: Float

  """All values that are contained in given list."""
  avg_temp_in: [Float!]

  """All values that are not contained in given list."""
  avg_temp_not_in: [Float!]

  """All values less than the given value."""
  avg_temp_lt: Float

  """All values less than or equal the given value."""
  avg_temp_lte: Float

  """All values greater than the given value."""
  avg_temp_gt: Float

  """All values greater than or equal the given value."""
  avg_temp_gte: Float
  min_temp: Float

  """All values that are not equal to given value."""
  min_temp_not: Float

  """All values that are contained in given list."""
  min_temp_in: [Float!]

  """All values that are not contained in given list."""
  min_temp_not_in: [Float!]

  """All values less than the given value."""
  min_temp_lt: Float

  """All values less than or equal the given value."""
  min_temp_lte: Float

  """All values greater than the given value."""
  min_temp_gt: Float

  """All values greater than or equal the given value."""
  min_temp_gte: Float
  max_temp: Float

  """All values that are not equal to given value."""
  max_temp_not: Float

  """All values that are contained in given list."""
  max_temp_in: [Float!]

  """All values that are not contained in given list."""
  max_temp_not_in: [Float!]

  """All values less than the given value."""
  max_temp_lt: Float

  """All values less than or equal the given value."""
  max_temp_lte: Float

  """All values greater than the given value."""
  max_temp_gt: Float

  """All values greater than or equal the given value."""
  max_temp_gte: Float
  snow: Float

  """All values that are not equal to given value."""
  snow_not: Float

  """All values that are contained in given list."""
  snow_in: [Float!]

  """All values that are not contained in given list."""
  snow_not_in: [Float!]

  """All values less than the given value."""
  snow_lt: Float

  """All values less than or equal the given value."""
  snow_lte: Float

  """All values greater than the given value."""
  snow_gt: Float

  """All values greater than or equal the given value."""
  snow_gte: Float
  rain: Float

  """All values that are not equal to given value."""
  rain_not: Float

  """All values that are contained in given list."""
  rain_in: [Float!]

  """All values that are not contained in given list."""
  rain_not_in: [Float!]

  """All values less than the given value."""
  rain_lt: Float

  """All values less than or equal the given value."""
  rain_lte: Float

  """All values greater than the given value."""
  rain_gt: Float

  """All values greater than or equal the given value."""
  rain_gte: Float
}

input WeatherWhereUniqueInput {
  id: ID
  day: String
}
